For: El "for" es una operación que se repite hasta que se cumpla una condición que uno establece. A este tipo de operaciones que se repiten una cantidad de veces se los llama "bucles". El for tiene 3 partes en la declaración. La primera parte, es donde queremos que comience el bucle; la segunda es la condición que queremos poner para que se detenga el bucle una vez cumplida; y la tercera es que queremos que haga el bucle una vez que complete una vuelta. Es importante establecer bien las 3 partes de la declaración, ya que corremos el riesgo de que la segunda parte, es decir la que detiene el bucle, no se cumpla nunca y entonces el bucle se ejecute de manera infinita o hasta que alguien cierre el programa. Esto provocaría que el código no avance más allá del bucle.
El tipo de bucle "for" es muy util para poder realizar múltiples operaciones que serían idénticas excepto por el o los valores que modificamos al final de cada vuelta. Entonces si queremos multiplicar un número por todos los valores del 1 al 10, el bucle comenzaría en el valor 1, se detendría al llegar a un valor mayor que 10 y al final de cada vuelta pasaría al siguiente número (en este caso particular, sería sumándo 1 al número que acaba de usar). De esta manera, primero multiplicaría por 1, luego por 2 y así. Aunque también podríamos empezar a multiplicar por 10 y terminar en 1.
En este caso la operación repetitiva es la multiplicación, y el único valor que cambiamos es uno de los productos de la multiplicación hasta llegar al valor deseado.

operador &&: Este operador, también llamado "y", se suele usar cuando estamos haciendo una declaración que puede tener como resultado falso o verdadero (expresión booleana). Este operador se utiliza entre medio de 2 declaraciones booleanas. Lo que hace es comparar ambas declaraciones y arrojar un único resultado al final. El resultado arrojado será falso a menos que ambas declaraciones anteriores sean verdaderas.
Es decir, si ambas son falsas, el operador && arroja falso. Si sólo una de ellas es verdadera, también arrojará falso. Esto es múy útil cuando en el código que escribimos necesitamos que 2 condiciones se cumplan para poder realizar algo. El operador && permite al programa preguntarse si estas 2 condiciones están cumplidas para arrojar el valor "true".

operador ||: Este operador también llamado "o", al igual que el anterior, va incluido entre 2 expresiones booleanas. La particularidad de este operador es que arrojará el resultado de "true" cuando cualquiera de las anteriores 2 expresiones sean verdaderas.
Dicho de otra manera, el operador || sólo podra arrojar el resultado de "false" si las 2 expresiones que está comparando son también falsas. Caso contrario siempre arrojará "true" como resultado.

operador !: el operador !, también llamado "not", lo que hace es negar la declaración anterior. También, en javascript, fuerza a la declaración a una expresión booleana. Es decir, que si tenemos la expresión numérica "1", y la negamos, en vez de devolver un número, nos devuelve un valor booleano "true" o "false". Lo mismo sucede si negamos una declaración que sea de tipo string.
En el caso de estar negando una declaración booleana, nos devolverá el valor contrario. Por ejemplo, si nosotros hacemos "!a" estaríamos negando "a". Por lo cual si el valor de "a" es verdadero, la operación "!a" nos devolverá falso y viceversa.
Nota: Javascript puede transformar de manera automática una variable numérica o string a booleana; por lo cual una variable con el valor numérico "1" javascript devolverá "true" en caso de ser convertido a booleano, por lo cual "!1" devolverá false siempre. Solo el 0 en caso de valor numérico da false. En el caso de las strings, sólo una string vacía devolverá false.